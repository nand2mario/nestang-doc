{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>NESTang is a Nintendo Entertainment System emulator for the affordable Sipeed Tang Nano 20K and Tang Primer 20K FPGA boards.</p> <p>Main features,</p> <ul> <li>720p HDMI video and sound output.</li> <li>Cycle accurate emulation quality as we nearly recreated the NES circuits.</li> <li>Directly connects controllers to the board, or use your PC game controller through the NESTang loader program.</li> <li>Open source and a good way to learn FPGA programming.</li> </ul> <p>Interested? You can start by downloading a NESTang release, then setup your build.</p> <p>This home of NESTang is under construction. Checkout the NESTang github page for latest information. </p>"},{"location":"downloads/","title":"Downloads","text":""},{"location":"downloads/#for-tang-nano-20k","title":"For Tang Nano 20K","text":"<p>NESTang 0.5 will support the new Tang Nano 20K. 0.5 has not released yet. But you can build from the latest code.</p>"},{"location":"downloads/#for-tang-primer-20k","title":"For Tang Primer 20K","text":"<p>Download NESTang 0.4.</p>"},{"location":"linux/","title":"NESTang Linux loader","text":"<p>Since 0.4, NESTang has added Linux loader program support. With a tiny and cheap Linux SBC, now you can enjoy fpga NES games on your living room TV much easier.</p> <p>Here's the basic idea,</p> <pre><code>   +--------------------------+       +-----------------------------+\n   |   Tang Primer 20K Dock   |       | Linux SBC (RPi, MangoPi etc)|-+\n   |                          |       |                             | |  ROMs in MicroSD card \n   |       HDMI     USB-C     |       |  USB-A/OTG   USB-C/MicroUSB |-+\n   +--------vvv------^^^------+       +------vvv-----------^^^------+\n             |        '-------&lt;-------.       |             '---------- USB power adapter\n             |          UART o/ USB   |       |\n   +---------v------------+       +---^-------v------+\n   |     TV / Monitor     |       |      USB Hub     &gt;----------------- USB gamepad\n   +----------------------+       +------------------+\n</code></pre> <p>The loader binary is in the release zip archive (<code>loader_linux_aarch64</code>). If it doesn't work on your SBC, you can build your own by <code>make</code> in loader/.</p> <p>My messy but working set up looks like this:</p> <p>Top side:</p> <p></p> <p>Bottom side is the MangoPi:</p> <p></p> <p>Of course a 3d-printed box would be great. If you design one, please kindly contribute your design (email me).</p>"},{"location":"screenshots/","title":"Screenshots","text":"NESTang on Tang Nano 20K  NESTang on Tang Primer 20K  SD rom selection menu"},{"location":"setup_nano/","title":"Setup for Tang Nano 20K","text":"<p>The main feature of 0.5 is standalone operation without tethering to a PC. To have a standalone NESTang, you need these,</p> <ul> <li>The Tang Nano 20K board.</li> <li>Two playstation 2 controllers, wired or wireless.</li> <li>A pair of Sipeed ps2 adapters.</li> <li>A MicroSD card for holding ROMS.</li> </ul> <p>Once you have these, set your build up as follows,</p> <ul> <li>Connected the controller adapters to pin 15-20 of both sides of the board (see schematics if you are not sure). Then connect the controllers.</li> <li>HDMI connection to a monitor or TV.</li> <li>Program NESTang 0.5 to the board with openFPGALoader or Gowin programmer.</li> <li>Use <code>tools/nes2img.py</code> python program to convert .nes ROM files to an .img file. This script requires Python &gt;=3.7 and needs the Pillow package (install with <code>pip3 install pillow</code>).  Then burn that image to the sd card with any sd tool (e.g. Balena Etcher).</li> <li>Insert MicroSD and power up the board, and enjoy your game!</li> </ul>"},{"location":"setup_primer/","title":"Setup for Tang Primer 20K","text":"<p>If you have Tang Primer 20K instead (get the nano if you don't have any board). Then here's what you need.</p> <ul> <li>Sipeed Tang Primer 20K (starting at $30).</li> <li>Muse-Lab HDMI PMod if you got the lite version of Tang: aliexpress or taobao. The dock version already has HDMI so you are fine. Wiring instructions for lite version.</li> </ul> <p>Here are the steps to set up NESTang\uff0c</p> <ul> <li>Download NESTang 0.4.</li> <li>Start Gowin Programmer, and program <code>nestang-lite.fs</code> or <code>nestang-dock.fs</code> depending on which board you have. If you see a colorful NES palette, then your setup is working. </li> <li>Connect your game controller/controllers to your PC. I use a pair of old Xbox 360 controllers.</li> <li>Run <code>loader.exe -c COM4 games\\rom.nes</code> (replace COM4 with your port number) to load the game <code>rom.nes</code> and run it. If it complains about missing DLLs, install Microsoft Visual C++ Redistributable package.</li> <li>Press the left button (LB) to call out the in-game OSD menu. There you can load other games in the <code>games</code> directory.</li> <li>If it didn't work, <code>loader.exe -r game.nes</code> will print messages from the core.</li> </ul> <p>Now enjoy your game!</p> <p>For 0.4, there's also a Linux loader program in addition to Windows. See Linux loader</p>"},{"location":"wiring/","title":"Wiring instructions for NESTang","text":"<p>This is for wiring the HDMI Pmod module (Muse-Lab PMOD-HDMI 1.0) to Tang Primer 20K. The module almost worked directly in the PMod sockets. The only thing off is the polarity of the data lanes. Alas, we therefore still need to connect it with dupont wires.</p> <p>Connect the module to the Tang's bottom GPIOs as follows.  - \"HDMI_CKP\" and etc are corresponding pin labels on the HDMI module. - The #1 pin for the GPIO bank is on the left side of the board.</p> <pre><code>            Bottom GPIO   \n             +-----+ \n          3V3|1   2|3V3 \n             |3   4| \n             |5   6|GND             \n             |7   8|                        \n             |9  10|                        \n             |11 12|                        \n             |13 14|                         \n             |15 16|                        \n             |17 18|\n             |19 20|\n HDMI_CKN H12|21 22|G11 HDMI_CKP\n HDMI_D0P H13|23 24|J12 HDMI_D0N\n HDMI_D1N K12|25 26|K13 HDMI_D1P\n HDMI_D2N L13|27 28|K11 HDMI_D2P\n             |29 30|\n             |31 32|\n             |33 34|\n             |35 36|\n             |37 38|\n             |39 40|\n             +-----+\n</code></pre> <p>Other HDMI modules could also work. Essentially the key signals are VCC/GND, a pair of differential clocks and three pairs of differential video data.</p>"},{"location":"dev/build_bitstream/","title":"Build Instructions","text":"<p>If you want to modify and/or build the project from source, you will need:</p> <ul> <li>GoWin IDE installed in your computer.</li> <li>The NESTang repository cloned.</li> </ul>"},{"location":"dev/build_bitstream/#build-steps","title":"Build Steps","text":"<ul> <li>Open the Project file <code>nes.gprj</code> in GoWin IDE.</li> <li>Go to <code>Project &gt; Configuration</code> menu.</li> <li>In <code>Synthesize &gt; General</code> tab, go to <code>Top Module/Entity</code> textbox and write <code>NES_Tang20k</code> (It is case sensitive, be careful!).</li> <li>In <code>Synthesize &gt; General</code> tab, go to <code>Verilog Language</code> combobox and select <code>System Verilog 2017</code>.</li> </ul> <ul> <li>In <code>Place and Route &gt; Dual Purpose Pins</code> tab, go to <code>SSPI as General Purpose IO</code> checkbox and mark it.</li> </ul> <ul> <li>Click <code>Apply</code> and then <code>OK</code> to exit the Project Configurations.</li> <li>The project is ready to be successfully Synthesized, Placed and Routed to a bitstream</li> </ul> <p>Note: the master branch targets the Tang Nano 20K board. Use the 0.4 tag if you want to build for the Tang Primer 20K.</p> <p>Enjoy!!</p>"},{"location":"dev/ddr3/","title":"DDR3 controller for Tang Primer 20K","text":"<p>Quite some time was spent on getting a low-latency (90ns) DDR3 controller to work for Tang Primer 20K. You may find that useful too.</p>"},{"location":"dev/plan/","title":"Roadmap","text":"<p>For the changes of NESTang over time, see changes.md.</p> <p>Here are what I may work on when I get time. No promise though.</p> <ul> <li>Saves and loads.</li> <li>Cheats support.</li> <li>Support more games.</li> <li>Make an enclosure design.</li> <li>Sipeed is making a 138K-LUT Tang board. Consider porting more cores to it when it comes out.</li> </ul> <p>Please file and issue or drop me a note if you have any suggestion. A pull request is even better.</p>"},{"location":"dev/sdimage/","title":"NESTang SD Card Image Format","text":"<p>Last change: 2023.3</p> <p>The nes2img.py script packs multiple ines rom images into  an SD card image. This files describes how this image file is layed out.</p> <p>The so-called \"SD card image\" is simply a sequence of 512-byte \"sectors\" in the following structure. The format is designed for easy parsing and processing by hardware, as NESTang aims to runs on plain FPGAs, not SoCs. For example, menu screens are stored as bitmaps so we can take advantage of the existing framebuffer and do not need to render text.</p> <pre><code>        +----------------+\n     .--| Meta Sector 0  |  1 sector\n     |  +----------------+\n     |  | Menu Bitmap 0  |  120 sectors\n     |  +----------------+\n  .--+--| Meta Sector 1  |  1 sector\n  |  |  +----------------+\n  |  |  | Menu Bitmap 1  |  120 sectors\n  |  |  +----------------+\n  |  |  |      ...       |\n  |  |  +----------------+\n  |  +-&gt;| NES image 0    |  variable # of sectors\n  |  |  +----------------+\n  |  `-&gt;| NES image 1    |\n  |     +----------------+\n  |     |      ...       |\n  |     +----------------+\n  `----&gt;| NES image 20   |\n        +----------------+\n        |      ...       |\n        +----------------+\n</code></pre> <p>Each \"meta sector\" contains meta data about up to 20 ines roms. It is followed by a corresponding menu bitmap that is displayed for the user to choose among these roms. The whole SD image can contain any number of meta sectors so there can be multiple screens of roms to choose from.</p> <p>Detailed layout of the meta sector is as follows. All multi-byte integers are little-endian.</p> <ul> <li>16B (bytes) header<ul> <li>4B magic, ascii of \"TANG\"</li> <li>3B prev_meta_sector, sector number of the previous meta sector.</li> <li>3B next_meta_sector, sector number of the next meta sector.</li> <li>1B num_items, number of menu items on this screen, 1 to 20</li> <li>1B background_color, in NES color (0 to 63)</li> <li>1B foreground_color, in NES color (0 to 63)</li> <li>3B not used</li> </ul> </li> <li>Up to 20 menu items, each 8 bytes<ul> <li>1B cursor_x, cursor x position of the menu item, 0 to 255</li> <li>1B cursor_y, cursor y position of the menu item, 0 to 239</li> <li>3B rom_start_sector, starting sector number of the corresponding rom</li> <li>3B rom_length, length in bytes of the rom</li> </ul> </li> </ul> <p>Format of the menu bitmap:</p> <ul> <li>This is a simple full screen (256x240) bitmap of the menu screen in NES color, one byte per pixel.   Since each sector is 512 bytes, holding 2 lines of pixels, therefore the whole image takes in total   120 sectors (60KB).</li> </ul> <p>Format of NES image:</p> <ul> <li>These are just raw ines roms stored in whole 512-byte sectors.</li> </ul>"}]}